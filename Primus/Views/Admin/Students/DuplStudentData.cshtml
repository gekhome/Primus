@model IEnumerable<Primus.Models.DuplStudentViewModel>
@using Primus.DAL;
@using Primus.Models;


@{
    ViewBag.Title = "Διπλότυποι μαθητές";
    Layout = "~/Views/Shared/_AdminLayout.cshtml";
}

@Html.AntiForgeryToken()
<div class="page-header" style="margin:5px 30px 5px 30px">
    <span style="margin:5px 30px 5px 30px;font-family:'Segoe UI';font-size:large;text-shadow:1px 1px #000000">
        <font style="color:#494949;float:left;font-family:'Segoe UI'">Διπλότυποι μαθητές και αιτήσεις</font>
    </span>
    <span style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px">@Html.ActionLink("Επιστροφή", "Index", "Admin", null, new { @class = "btn btn-warning", style = "font-size:14px" })</span>
    <button class="btn btn-info" style="margin:5px 5px 5px 5px;float:right;font-family:'Segoe UI';font-size:14px" onclick="RefreshGridMaster()">Ανανέωση</button>
</div>

<div class="body-content" style="margin:5px 30px 5px 30px;font-size:small">
        @(Html.Kendo().Grid(Model)
        .Name("Master")
        .Columns(columns =>
        {
            columns.Bound(c => c.ΑΦΜ).Width(12);
            columns.Bound(c => c.ΕΠΩΝΥΜΟ).Width(22).Groupable(false)
                .ClientFooterTemplate("Συνολικό πλήθος: #=count#")
                .ClientGroupFooterTemplate("Πλήθος: #=count#");
            columns.Bound(c => c.ΟΝΟΜΑ).Width(20).Groupable(false);
            columns.Bound(c => c.SCHOOL_NAME).Width(24);
            columns.Bound(c => c.EIDIKOTITA_TEXT).Width(50);
            columns.Bound(c => c.ΜΑΘΗΤΗΣ_ΚΩΔΙΚΟΣ).Hidden();
            columns.Command(command => { command.Destroy(); }).Width(16);                       
            columns.Template(
            @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("xStudentEdit", "Admin") + "?studentId=#=ΜΑΘΗΤΗΣ_ΚΩΔΙΚΟΣ#' target = _blank><span class=\"k-icon k-edit\"></span>Καρτέλα</a>"
            ).Width(17);
        })
        .HtmlAttributes(new { style = "display: block;font-size:11px" })        
        .Groupable()
        .Editable(editable => editable.Mode(GridEditMode.InLine))
        .Navigatable()
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(10))
        .Selectable()
        .Filterable()
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Scrollable(scr => scr.Height(360))
        .DataSource(dataSource => dataSource
        .Ajax()
        .PageSize(60)
        .ServerOperation(false)
        .Model(model =>
        {
            model.Id(p => p.ΜΑΘΗΤΗΣ_ΚΩΔΙΚΟΣ);
            model.Field(p => p.ΣΧΟΛΗ).DefaultValue(1);
        })
        .Read(read => read.Action("DuplStudent_Read", "Admin"))
        .Destroy(destroy => destroy.Action("DuplStudent_Destroy", "Admin"))
        .Aggregates(a =>
        {
            a.Add(p => p.ΕΠΩΝΥΜΟ).Count();
        })
        .Events(events => events.Error("error_handler1"))
        )
        .Events(events => events.Change("change"))
        )
    </div>

    <div class="body-content" style="margin:10px 30px 5px 30px;font-size:small">

        @(Html.Kendo().Grid<AitisiGridViewModel>()
        .Name("Child")
        .AutoBind(false)
        .HtmlAttributes(new { style = "display: block;font-size:11px" })
        .Navigatable()
        .Filterable()
        .Editable(editable => editable.Mode(GridEditMode.InLine).CreateAt(GridInsertRowPosition.Top))
        .Resizable(resize => resize.Columns(true))
        .Sortable(sortable => sortable.AllowUnsort(true).SortMode(GridSortMode.MultipleColumn))
        .Pageable(pageable => pageable
        .Refresh(true)
        .PageSizes(true)
        .ButtonCount(5))
        .Scrollable(scr => scr.Height(160))
        .Columns(columns =>
        {
            columns.ForeignKey(f => f.ΣΧΟΛΙΚΟ_ΕΤΟΣ, (IEnumerable<ΣΥΣ_ΣΧΟΛΙΚΑ_ΕΤΗ>)ViewData["schoolYears"], "SCHOOLYEAR_ID", "SCHOOLYEAR_TEXT").Width(20);
            columns.ForeignKey(f => f.ΤΑΞΗ, (IEnumerable<ΣΥΣ_ΤΑΞΕΙΣ>)ViewData["takseis"], "ΤΑΞΗ_ΚΩΔ", "ΤΑΞΗ_ΛΕΚΤΙΚΟ").Width(20);
            columns.Bound(c => c.ΗΜΝΙΑ_ΑΙΤΗΣΗ).Width(20);
            columns.ForeignKey(f => f.ΜΑΘΗΤΗΣ_ΚΩΔ, (IEnumerable<qrySTUDENT_SELECTOR>)ViewData["students"], "ΜΑΘΗΤΗΣ_ΚΩΔΙΚΟΣ", "ΟΝΟΜΑΤΕΠΩΝΥΜΟ").Width(40);
            columns.Command(command => { command.Edit(); command.Destroy(); }).Width(34);
            columns.Template(
                @<text></text>)
            .ClientTemplate(
            "<a class=\"k-button k-button-icontext\" href='" + Url.Action("xAitisiEdit", "Admin") + "?aitisiId=#=ΑΙΤΗΣΗ_ΚΩΔ#' target = _blank><span class=\"k-icon k-edit\"></span>Στοιχεία αίτησης</a>"
            ).Width(26);

        })
        .ToolBar(toolBar =>
        {
            toolBar.Create();
        })
        .DataSource(ds => ds
            .Ajax()
            .Batch(false)
            .PageSize(40)
            .ServerOperation(false)
            .Model(model =>
            {
                model.Id(p => p.ΑΙΤΗΣΗ_ΚΩΔ);
                model.Field(p => p.ΜΑΘΗΤΗΣ_ΚΩΔ).Editable(false);
                model.Field(p => p.ΣΧΟΛΙΚΟ_ΕΤΟΣ).DefaultValue(1);
                model.Field(p => p.ΤΑΞΗ).DefaultValue(1);
            })
            .Create(create => create.Action("Aitisi_Create", "Admin").Data("data"))
            .Read(read => read.Action("Aitisi_Read", "Admin").Data("data"))
            .Update(update => update.Action("Aitisi_Update", "Admin").Data("data"))
            .Destroy("Aitisi_Destroy", "Admin")
            .Events(events => events.Error("error_handler2"))
        )
        )

    </div>

<script type="text/javascript">

    var options = null;

    function filterEidikotites() {
        var schoolID = $("#ΣΧΟΛΗ").data("kendoDropDownList").value();
        if (schoolID) {
            return { schoolId: schoolID };
        }
        else {
            return { schoolId: 0 };
        }
    }

    function RefreshGridMaster(e) {
        var grid = $("#Master").data("kendoGrid");
        grid.dataSource.read();

    }

    function RefreshGridChild(e) {
        var grid = $("#Child").data("kendoGrid");
        grid.dataSource.read();

    }
    function change(e) {
        var dataItem = this.dataItem(this.select());
        var studentID = dataItem.ΜΑΘΗΤΗΣ_ΚΩΔΙΚΟΣ;

        $("#Child").data("kendoGrid").dataSource.read({ studentId: studentID });
        $("#Child").css("display", "block");

        // 1st step: save grid state
        @*var grid = $("#Master").data("kendoGrid");
        var dataSource = grid.dataSource;

        var state = {
            //columns: grid.columns,
            page: dataSource.page(),
            pageSize: dataSource.pageSize(),
            sort: dataSource.sort(),
            filter: dataSource.filter(),
            group: dataSource.group()
        };

        $.ajax({
            url: '@Url.Action("Save", "Home")',
            data: { data: JSON.stringify(state) }
        });

        //alert("state:" + JSON.stringify(state));  // verifies

        // 2nd step: persist selected row
        var grid = $("#Master").data("kendoGrid");
        //alert("local storage: " + JSON.stringify(dataItem));  // verifies
        localStorage.setItem("selected-row", JSON.stringify(dataItem));*@
    }

    function data() {
        var masterGrid = $("#Master").data("kendoGrid");
        // get data item for selected row
        var dataItem = masterGrid.dataItem(masterGrid.select());
        if (dataItem) {
            return { studentId: dataItem.ΜΑΘΗΤΗΣ_ΚΩΔΙΚΟΣ };
        }
        else {
            return { studentId: 0 };
        }
    }

    function error_handler1(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGridMaster(e);
        }
    }

    function error_handler2(e) {
        if (e.errors) {
            var message = "";
            $.each(e.errors, function (key, value) {
                if ('errors' in value) {
                    $.each(value.errors, function () {
                        message += this + "<br/>";
                    });
                }
            });
            MessageBoxAlert(message, "Σφάλμα");
            RefreshGridChild(e);
        }
    }

</script>

